//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title:            New Years Eve Countdown!
// Files:            Project1.java
// Semester:         CS 302 Summer 2017
//
// Author:           Caspar Chen
// Email:            jcchen4@wisc.edu
// CS Login:         caspar
// Lecturer's Name:  Steve Earth
// Lab Section:      (none)
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ///////////////////
//
// Partner Name:     (none)
// Partner Email:    (none)
// Partner CS Login: (none)
// Lecturer's Name:  (none)
// Lab Section:      (none)
// 
// VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
//    _X_ Write-up states that Pair Programming is allowed for this assignment.
//    _X_ We have both read the CS302 Pair Programming policy.
//    _X_ We have registered our team prior to the team registration deadline.
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
// Students who get help from sources other than their partner must fully 
// acknowledge and credit those sources of help here.  Instructors and TAs do 
// not need to be credited here, but tutors, friends, relatives, room mates 
// strangers, etc do.
//
// Persons:          (identify each person and describe their help in detail)
// Online Sources:   (identify each URL and describe its assistance in detail)
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////
/**
 * This program is a game between two players, and the player who wins the coin
 * flip will go first. Moreover, for invalid inputs, there will be corresponding
 * error message. Each player entered a valid date and then switch turns. The 
 * person who got three strikes will directly lose the game, and who finally
 * enter Dec 31 without conflicting with strike rules will win the game and the 
 * program will ask whether they would like a restart.
 * Bugs: no Bugs 
 * 
 * @author Caspar Chen */

import java.util.Random;
import java.util.Scanner;

public class Project1 {

	public static void main(String[] args) {
		Scanner scnr = new Scanner(System.in);
		int i = 1;   //the number of game that players have played
		String playerName1 = ""; // declare and store a player's name
		String playerName2 = "";// declare and store a player's name
		String str = "", lets = "";//store string inputs
		String restart = ""; //declare a string variable for restarting a game
		String playerChoice = "";// store player's choice for coin flip
		final int TRIALS = 	3;// set a constant total number of game 
		final int SEED = 123;// set a constant seed

		int result; //store int number generated by Random method
		int numTurn = 1;//declare and initialize number of turn
		int Num2 = 0;// store date of that month
		
		//boolean variables determine whether jump out of the loops
		boolean enterKey1 = true;
		boolean enterKey2 = true;
		boolean enterKey3 = true;
		boolean enterKey4 = true;
		boolean learnPhase = true;
		boolean printThis = false;
		
		//Build new constructors for Date and Player
		Date playerDate = new Date("", 0);
		Date myDate = new Date("", 0);
		Date prevPlayerDate = new Date("", 0);
		Player currentPlayer = new Player("");
		Player prevPlayer = new Player("");
		//set seed to 123 for random number generator
		Random randomNum = new Random(SEED);
		
		

		//repeat prompt if the user hits enter
		
		while (enterKey1&&!learnPhase) {
			System.out.print("Enter name for one of the player: ");
		
			playerName1 = scnr.nextLine();

			if (playerName1.length() == 0) {
				enterKey1 = true;
			} else {
				enterKey1 = false;
			}
		}
		//prompt to enter name for second player
		
		//repeat prompt if the user hits enter
		while (enterKey2&&!learnPhase) {
			System.out.print("Enter a different name for the opponent: ");
			playerName2 = scnr.nextLine();
			if (playerName2.length() == 0 || 
					playerName2.equalsIgnoreCase(playerName1)) {
				enterKey2 = true;
			} else {
				enterKey2 = false;
			}
		}
		//Construct new Players
		if(learnPhase){
			playerName1 = "AI#1";
			playerName2 = "AI#2";
		}
		
		Player player1 = new Player(playerName1);
		Player player2 = new Player(playerName2);
		
		if (player1.getIsHuman()&&player2.getIsHuman()){
			printThis = false;
		}
		
		//loop for a new game when user does not put anything start with 'N','n'
		while (restart.length() == 0 
				|| (restart.charAt(0) != 78 && restart.charAt(0) != 110)) {
			//reset some values
			numTurn = 1;
			enterKey3 = true;
			enterKey4 = true;
			currentPlayer.reset();
			prevPlayer.reset();
			if(printThis) {
			System.out.print(playerName1 
					+ ", call Heads or Tails to determine starting player: ");
			}
			//repeat prompt if the user gives valid input 
			while (enterKey3) {
				//check if player1 is human
				if(player1.getIsHuman()) {
				playerChoice = scnr.nextLine(); }
				else {
					//generate AI's pick on heads or tails
					int pick =  randomNum.nextInt(2);
					if (pick == 0) {
						playerChoice = "Heads";
						if(printThis) {
						System.out.println(playerChoice);
					}
					}
					else {
					
						playerChoice = "Tails";
						if(printThis) {
						System.out.println(playerChoice);
						}
					}
				}

				if (playerChoice.length() == 0) {
					if(printThis) {
					System.out.print(playerName1 
					+ ", call Heads or Tails to determine starting player: ");
					}
	} else if (playerChoice.charAt(0) == 'h' || playerChoice.charAt(0) == 'H') {
					enterKey3 = false;
	} else if (playerChoice.charAt(0) == 't' || playerChoice.charAt(0) == 'T') {

					enterKey3 = false;
				} else {
					if(printThis) {
					System.out.print(playerName1 
					  + ", call Heads or Tails to determine starting player: ");
					}
				}
			}

			playerChoice = playerChoice.substring(0, 1).toUpperCase();
			//determine whether the player guess the right result of coin flip
		String	coinResult = coinFlip(playerChoice, randomNum);
			if(coinResult.charAt(0)=='0'){
				if(printThis) {
				System.out.println("It came up "+coinResult.substring(1, 6)+
						"! "+player1.getName()+" won the coin toss");
				}
				currentPlayer = player1;
			} else{
				if(printThis) {
				System.out.println("It came up "+coinResult.substring(6, 11)+
						"! "+player1.getName()+" lost the coin toss");
				}
				currentPlayer = player2;
			}
			if(printThis) {
			System.out.println("");
			System.out.println("This is game number " + i);
			}
			
			
			
			
			//loop continues until a player reaches Dec 31 with valid input
			while (enterKey4||learnPhase) {
				//Print out last player's choice of date
				if (numTurn != 1) {
					if(printThis) {
					System.out.println(prevPlayer.getName() + " choose " 
				+ prevPlayerDate + " last turn");
					}
				}
					if(printThis) {
		System.out.print("Game#" + i + " Turn#" + numTurn + ": " + currentPlayer
						+ ", enter a month followed by a space then a date: ");
					}
		//check if current Player is AI or no		
		if(currentPlayer.getIsHuman()) {
					str = scnr.nextLine();}
		else{
			//AI's valid moves ruled here
			if(numTurn == 1) {
				str = "Jan 1";	
				if(printThis) {
				System.out.println(str);
				}
			}
			else {
			int choice =randomNum.nextInt(prevPlayerDate.legalMoves().length);
			Date[] legalacts = prevPlayerDate.legalMoves();
			str = legalacts [choice].getName() + " "+ legalacts [choice].getNum();
			System.out.println(str);
			}
		}
				// check if nothing entered for date
				if (str.length() == 0) {
					System.out.println("No entry detected");
				} else {
					Scanner strScan = new Scanner(str);
					lets = strScan.next();
					//check if less than 3 characters in first word
					if (lets.length() < 3) {

	System.out.println("Entry must be at least 3 letters to determine month.");

					} else {
						lets = lets.substring(0, 3);
						lets = lets.substring(0, 1).toUpperCase() 
								+ lets.substring(1, 3).toLowerCase();
					//check if the first three letters match a month
						if (!validMonth(lets)) {
							System.out.println(
									"the first 3 letters " + "\"" + lets + "\"" 
							+ " don't match a known month");
						}
					}
		//check if player hits return after the month and never typed a date
					if (!strScan.hasNext()) {
			System.out.println("You did not make a second entry for the date");
					} 
				//check if the entry immediately after the month is a number
					else if (!strScan.hasNextInt()) {
			System.out.println("The second entry, the date, must be a number");
						String a = strScan.next();
						 
						if (strScan.hasNext()) {
	   System.out.println("Only two entries needed. Ignoring additional input");
						}

					} else {
						Num2 = strScan.nextInt();
		//Check if the date entered doesn't exist in the month they entered
						if (!validDay(lets, Num2) || !validMonth(lets)) {
							if(errorPrompt(lets, Num2).equals("")) {
							System.out.print(errorPrompt(lets, Num2));}
							else{
							System.out.println(errorPrompt(lets, Num2));
							}
							//check if player typed in more than two entries
							if (strScan.hasNext()) {
   	System.out.println("Only two entries needed. Ignoring additional input");
														}
						} else {
							//check if player typed in more than two entries
							if (strScan.hasNext()) {
   	System.out.println("Only two entries needed. Ignoring additional input");
							}
							playerDate.setName(lets);
							playerDate.setNum(Num2);
							myDate = new Date(lets, Num2);
							
							
							//check if players's input causes a strike
			if (playerDate.isStrike(prevPlayerDate, numTurn, prevPlayer)) {
				currentPlayer.setStrikes(currentPlayer.getStrikes() + 1);
				System.out.println(currentPlayer.getName() + ", you now have "
									+ currentPlayer.getStrikes() + " strikes");
	        //if a player gets 3 strikes, the game end and he lost
							if (currentPlayer.getStrikes() == 3) {
		System.out.println("Game#" + i + " is over: " + currentPlayer.getName()
						+ " lost on turn " + numTurn + " because of 3 strikes");
			
									enterKey4 = false;
									//set prevPlayer
									if (numTurn == 1) {

										if (currentPlayer == player1) {
											prevPlayer = player2;
										} else {
											prevPlayer = player1;
										}

									}
									//Increase game won for prevPlayer
					   	prevPlayer.setGamesWon(prevPlayer.getGamesWon() + 1);
								}

							} else {
								
								//Increase game won by 1 to currentPlayer
								if (lets.equals("Dec") && Num2 == 31) {
					currentPlayer.setGamesWon(currentPlayer.getGamesWon() + 1);
					if(printThis) {
					System.out.println("Game#" + i + " is over: " + currentPlayer.getName()
					+ " won on turn " + numTurn + " by reaching Dec 31!");
					}
									enterKey4 = false;
								} else {
									//Switch turns, increase numTurns by 1
									numTurn++;
									prevPlayerDate = myDate;

									if (currentPlayer == player1) {
										prevPlayer = player1;
										currentPlayer = player2;
									} else {
										prevPlayer = player2;
										currentPlayer = player1;
									}
								}

							}

						}
					}

				}
			}
			//print out winning number summary for current game
			System.out.println("The running total of games won so far is:");
			System.out.println(player1.getName() + "=" 
					+ player1.getGamesWon());
			System.out.println(player2.getName() + "=" 
			+ player2.getGamesWon());
			if(learnPhase){
			System.out.println("learning phase complete");
			}
			System.out.println("");
			//prompt for restart
			System.out.print("Do you wish to play again (Y/N)? ");
			if(!player1.getIsHuman()){
				if(i>= TRIALS){
					restart = "No";
					
				}
				else{
					restart = "Yes";
					i++;
				}
				System.out.println(restart);
			}
			else{
			restart = scnr.nextLine();
			i++;
			}
		}
	

	}
/**
 * This method checks whether a string input matches a valid month
 * @param lets represents the string name of month
 * @return true if lets matches any valid 12 month, false otherwise.
 */
	public static boolean validMonth(String lets) {

		if (lets.equalsIgnoreCase("Jan")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Feb")) {

			return true;
		}
		if (lets.equalsIgnoreCase("Mar")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Apr")) {
			return true;
		}
		if (lets.equalsIgnoreCase("May")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Jun")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Jul")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Aug")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Sep")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Oct")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Nov")) {
			return true;
		}
		if (lets.equalsIgnoreCase("Dec")) {
			return true;
		}

		return false;

	}
/**
 * This method tells whether the input date is valid for that month
 * @param lets represents a given month
 * @param Num2 represents a date of that month
 * @return true if that day is in the month, otherwise false
 */
	public static boolean validDay(String lets, int Num2) {
		//check date in February
		if (lets.equals("Feb")) {
			if (Num2 >= 1 && Num2 <= 28) {
				return true;
			}
			//check date in those months that should have 30 days
		} else if (lets.equals("Apr") || lets.equals("Jun") || 
				lets.equals("Sep") || lets.equals("Nov")) {
			if (Num2 >= 1 && Num2 <= 30) {
				return true;
			}
			//check date in those months that have 31 days
	} else if (lets.equals("Jan") || lets.equals("Mar") || lets.equals("May")
      	|| lets.equals("Jul")|| lets.equals("Aug") || lets.equals("Oct") 
      		|| lets.equals("Dec")) {
			if (Num2 >= 1 && Num2 <= 31) {
				return true;
			}
		}
		return false;
	}
/**
 * This method prints out error message for invalid date range for a given month
 * @param lets represents a given month
 * @param Num represents a date of that month
 * @return error message for invalid date range for a given month
 */
	public static String errorPrompt(String lets, int Num) {
		// feb has 28 days
		if (lets.equals("Feb")) {
			return "Your entry date of " + Num 
					+ " is not between 1 and 28, the number of days in " 
					+ lets;
		}
		//for months has 30 days
		else if (lets.equals("Apr") || lets.equals("Jun") || lets.equals("Sep")
				|| lets.equals("Nov")) {

			return "our entry date of " + Num 
					+ " is not between 1 and 30, the number of days in " + lets;
		}
		//for months has 31 days
		else if (lets.equals("Jan") || lets.equals("Mar") || lets.equals("May")
				|| lets.equals("Jul")|| lets.equals("Aug") || lets.equals("Oct") 
				|| lets.equals("Dec")) {
			return "Your entry date of " + Num 
					+ " is not between 1 and 31, the number of days in " + lets;
		}
		return "";

	}

	/**
	 * This method is to check if the coin flip results match with random value
	 * 0 or 1 generated
	 * @param inEntry refers to a string name
	 * @param inGen refers to a random generator
	 * @return a string representation of rand+entry+flip
	 */
	public static String coinFlip(String inEntry, Random inGen){
		String entry, flip;
		int rand = inGen.nextInt(2);
		inEntry = inEntry.substring(0, 1).toUpperCase();
		if(inEntry.equals("H")){
			entry = "Heads";
			flip = "Tails";
		} else{
			entry = "Tails";
			flip = "Heads";
		}
		return rand+entry+flip;
	}
	
	

}
